#!/bin/sh -e

# Copyright (c) 2022 Firebuild Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Create an image that already contains some of the essential stuff,
# including build-essential and whatever is needed to build firebuild.
#
# The lxc/incus profile "firebuild-perftest" has to already exist.
#
# See README_SETUP.txt for further details.

WITH_DIFFOSCOPE=false

while [ -n "$1" ]; do
    case "$1" in
        --with-diffoscope)
            WITH_DIFFOSCOPE=true
            shift
            ;;
        *)
            break;
            ;;
    esac
done

if which incus > /dev/null 2>&1; then
    CONTAINER_MGR="incus"
elif which lxc > /dev/null 2>&1; then
    CONTAINER_MGR="lxc"
else
    echo "Could not find supported container manager!" >&2
    exit 1
fi

if [ "$CONTAINER_MGR" = "lxc" ]; then
    BASE_IMG="${1:-ubuntu:jammy}"
else
    BASE_IMG="${1:-images:ubuntu/jammy/cloud}"
fi

CONTAINER="firebuild-perftest-image-template"
CONTAINER_EXEC="$CONTAINER_MGR exec $CONTAINER --"

echo " · Launching $CONTAINER_MGR instance"
$CONTAINER_MGR delete --force $CONTAINER 2> /dev/null || true
$CONTAINER_MGR launch -p firebuild-perftest "$BASE_IMG" $CONTAINER

echo " · Waiting for system to start"
sleep 1
$CONTAINER_EXEC systemctl is-system-running --wait || true

$CONTAINER_EXEC sh -c 'echo debconf debconf/frontend select Noninteractive | debconf-set-selections'
$CONTAINER_EXEC sh -c 'printf "Dpkg::Options:: \"--force-confdef\";\nDpkg::Options:: \"--force-confold\";\n" > /etc/apt/apt.conf.d/98-dpkg-confdef'

$CONTAINER_EXEC sh -c 'echo "Acquire::Retries \"3\";" > /etc/apt/apt.conf.d/99-retry'
ARCHIVE_MIRROR=$(grep 'archive\.ubuntu\.com' /etc/apt/sources.list | sed 's|.*http://||;s|/.*||;q')
[ -z "${ARCHIVE_MIRROR}" ] || $CONTAINER_EXEC sh -c 'sed -i "s|[^/]*archive.ubuntu.com|'${ARCHIVE_MIRROR}'|" /etc/apt/sources.list'
echo " · Adding deb-src entries to sources.list"
$CONTAINER_EXEC sh -c 'sed -i "s/Types: deb/Types: deb deb-src/" /etc/apt/sources.list.d/*.sources /etc/cloud/templates/sources.list.ubuntu.deb822.tmpl' || true
$CONTAINER_EXEC sh -c 'sed -i "s/# deb-src /deb-src /" /etc/apt/sources.list /etc/cloud/templates/sources.list.*.tmpl' || true

if [ -n "$(apt-config dump | grep Proxy)" ]; then
    apt-config dump | grep Proxy | $CONTAINER_EXEC sh -c 'cat > /etc/apt/apt.conf.d/99-firebuild-apt-proxy'
fi

# Always install phased updates to fix occasional uninstallability problems, like:
# https://bugs.launchpad.net/ubuntu/+source/systemd/+bug/1979579
echo 'APT::Get::Always-Include-Phased-Updates "true";' | $CONTAINER_EXEC sh -c 'cat > /etc/apt/apt.conf.d/99-firebuild-phased-updates'

if $CONTAINER_EXEC sh -c 'dpkg -l needrestart 2> /dev/null | grep -q "^i"'; then
    echo " · Removing needrestart"
    $CONTAINER_EXEC eatmydata apt-get -y purge needrestart
fi

case $BASE_IMG in
    *ubuntu*bionic*)
        # ubuntu-toolchain-r/test distributes GCC-10
        PPAS="ppa:firebuild/build-deps ppa:ubuntu-toolchain-r/test"
        ;;
    *ubuntu*focal*)
        PPAS="ppa:firebuild/build-deps"
        ;;
    *)
        PPAS=""
esac

if [ -n "$PPAS" ]; then
    echo " . Adding PPAs for backported and fixed packages"
    # run apt-get update before adding the PPAs to make sure that network is already up
    $CONTAINER_EXEC apt-get update -qq
    for ppa in $PPAS; do
        $CONTAINER_EXEC add-apt-repository -y -n $ppa
    done
fi

$CONTAINER_EXEC apt-get update -qq
$CONTAINER_EXEC apt-get install -yqq eatmydata
$CONTAINER_EXEC eatmydata apt-get upgrade -yqq

echo " · Disabling man-db creation"
$CONTAINER_EXEC sh -c 'echo man-db man-db/auto-update boolean false | debconf-set-selections'

echo " · Removing packages with background jobs likely interfering with tests"
$CONTAINER_EXEC eatmydata apt-get -yqq purge rsyslog unattended-upgrades || true

# This fails LP: #1878674
$CONTAINER_EXEC eatmydata apt-get -yqq purge snapd || true

echo " · Disabling APT updates"
$CONTAINER_EXEC bash -c 'sed -i s/1/0/ /etc/apt/apt.conf.d/10periodic 2> /dev/null || true'

echo " · Installing needed and most likely needed packages"
$CONTAINER_EXEC eatmydata apt-get install -qqy git python3 graphviz build-essential

case $BASE_IMG in
    *ubuntu*bionic*)
        # firebuild needs those fresher dependencies to build on Bionic
        $CONTAINER_EXEC eatmydata apt-get install -qqy cmake debhelper/bionic-backports dwz/bionic-backports
        ;;
esac

if $WITH_DIFFOSCOPE; then
    $CONTAINER_EXEC eatmydata apt-get install -qqy fakeroot diffoscope
fi

echo " · Purging unneeded packages"
$CONTAINER_EXEC eatmydata apt-get -yqq autoremove || true

echo " · Creating ubuntu user if needed"
$CONTAINER_EXEC addgroup ubuntu --gid 1000 --disabled-password || true
$CONTAINER_EXEC adduser ubuntu --uid 1000 --gid 1000 --disabled-password --gecos "" || true

echo " · Stopping $CONTAINER_MGR instance"
$CONTAINER_MGR stop firebuild-perftest-image-template

if $CONTAINER_MGR image list | grep -qw firebuild-perftest-image-template; then
  echo " · Removing previous $CONTAINER_MGR image"
  $CONTAINER_MGR image delete firebuild-perftest-image-template
fi

echo " · Creating $CONTAINER_MGR image"
$CONTAINER_MGR publish --compression none firebuild-perftest-image-template --alias firebuild-perftest-image-template

echo " · Deleting $CONTAINER_MGR instance"
$CONTAINER_MGR delete firebuild-perftest-image-template

echo " · Done"
