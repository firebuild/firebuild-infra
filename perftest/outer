#!/usr/bin/python3

# Copyright (c) 2022 Firebuild Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Usage: outer [-d|--debugging] [-f|--firebuild=/path/to/tree] [test [test ...]]
#
# This script runs either certain tests (given in the command line), or all of them
# (if no such command line parameter given), as defined in tests.conf.
#
# For each test, an LXD container is built up by this script, satisfying the dependencies.
#
# Each test is then run by "inner" within its own container.
#
# The "-f DIR" (defaults to ~/firebuild) parameter needs to point to the topmost
# directory of the checked out firebuild git tree. This will be copied into the
# container and built there.
#
# Make sure to follow the steps from README_SETUP.txt before running this script.
#
# This script must be started from its containing directory.
#
# The version of firebuild used will be whichever version is checked out locally
# (and possibly modified on top of that). This will be copied into the container
# and built there, in Release or Debug mode depending on the "-d" flag.
#
# The result (timing data) is appended to ~/buildtimes.csv (on the outer host),
# unless "-d" was specified.
#
# inner is run via "script" as wrapper, so its output is logged to
# ~/firebuild-typescript-<testname>-<timestamp>. This log is deleted if the test
# completes successfully.
#
# The container is deleted in case of success, and preserved (renamed to contain the
# timestamp in its name) in case of failure.

import argparse
import os
import shutil
import sys
import tempfile
import time


parser = argparse.ArgumentParser()
parser.add_argument("-d", "--debugging",
                    action="store_true",
                    help="debugging firebuild (build it in Debug mode, skip non-firebuild build, don't record performance)")
parser.add_argument("-f", "--firebuilddir",
                    default="~/projects/firebuild",
                    help="root of the firebuild git tree, default is ~/projects/firebuild",
                    metavar="DIR")
parser.add_argument("-j","--jobs",
                    default=str(os.cpu_count()),
                    help="list of parallelism levels to use in builds, default is 1,4. Passing empty string will use \"-j\"")
parser.add_argument("--keep-log",
                    action="store_true",
                    help="keep the log file even after successful run")
parser.add_argument("--stop-on-first-failure",
                    action="store_true",
                    help="stop tests after the first failed one")
parser.add_argument("--with-diffoscope",
                    action="store_true",
                    help="compare build results with diffoscope (needs diffoscope and fakeroot pre-installed)")
parser.add_argument("--build-firebuild-with-clang",
                    action="store_true",
                    help="Build the firebuild package using Clang instead of GCC")
parser.add_argument("--sanitize",
                    action="store_true",
                    help="Build firebuild with Address Sanitizer and Undefined Behavior Sanitizer enabled")
parser.add_argument("-r","--generate-report",
                    action="store_true",
                    help="Generate a report for each firebuild-intercepted run and save them")
parser.add_argument("--with-ccache",
                    action="store_true",
                    help="Install and use ccache along with firebuild")
parser.add_argument("--only-ccache",
                    action="store_true",
                    help="Install and use ccache instead of firebuild")
parser.add_argument("--ccache-is-sccache",
                    action="store_true",
                    help="Use sccache instead of ccache")
parser.add_argument("--extra-fb-opts",
                    help="Extra firebuild options for all intercepted builds. Use the --extra-fb-opts=\"...\" notation.")
parser.add_argument("--extra-fb-opts1",
                    help="Extra firebuild options for the 1st intercepted build. Use the --extra-fb-opts1=\"...\" notation. Appended to --extra-fb-opts's value.")
parser.add_argument("--extra-fb-opts2",
                    help="Extra firebuild options for the 2nd intercepted build. Use the --extra-fb-opts2=\"...\" notation. Appended to --extra-fb-opts's value.")
parser.add_argument("--extra-version-string",
                    help="Append \"-\" and this string to the version, like vN.N-NNN-gXXXXX-<extra version string>.")
parser.add_argument("--compressed-cache-size",
                    action="store_true",
                    help="Measure cache's zstd-compressed size.")
parser.add_argument("--timestamp-params",
                    help="Pipe build log through 'ts < timestamp-params >'")
parser.add_argument("--enable-tests",
                    help="Enable tests in the intercepted builds",
                    action="store_true")
parser.add_argument("--separate-deb-prep",
                    help="Try a heuristic to run the configuration phase before measuring the \"deb\" type builds",
                    action="store_true")
parser.add_argument("--tests-conf",
                    default="tests.conf",
                    help="configuration file with test descriptions")
parser.add_argument("tests",
                    nargs="*",
                    help="name of the test to run or <name>:<type>:<timeout minutes>, if none specified then run all the tests",
                    metavar="TEST")
args = parser.parse_args()

fbdir = os.path.expanduser(args.firebuilddir)
if not os.path.isdir(fbdir):
  print('"' + fbdir + '" does not exist. Specify "-f DIR".', file=sys.stderr)
  sys.exit(1)

container_exec_as_ubuntu_params = "--user 1000 --group 1000 --env HOME=/home/ubuntu"

if shutil.which("incus"):
  container_mgr = "incus"
else:
  container_mgr = "lxc"

def container_exec(name, cmd, user=None, extra_exec_params="", use_popen=False):
  exec_cmd = container_mgr + " exec {params} {extra_params} {name} -- {cmd}".format(
    params=container_exec_as_ubuntu_params if user == "ubuntu" else "",
    extra_params=extra_exec_params,
    name=name,
    cmd=cmd)
  if use_popen:
    return os.popen(exec_cmd)
  else:
    return os.system(exec_cmd)

def debug(str):
  print(" ðŸ”¹ " + str, file=sys.stderr, flush=True)

def deb_build_env(debug_build, with_clang):
  cppflags = "-DFB_EXTRA_DEBUG" if debug_build else ""
  cflags = "-O0 -ggdb" if debug_build else ""
  cxxflags = "-O0 -ggdb" if debug_build else ""

  return "DEB_BUILD_OPTIONS=\"terse\" DEB_CPPFLAGS_APPEND=\"{}\" DEB_CFLAGS_APPEND=\"{}\" DEB_CXXFLAGS_APPEND=\"{}\"{}".format(
    cppflags, cflags, cxxflags, " CC=clang CXX=clang++ LD=ld.lld" if with_clang else "")

# Convert exit status from Unix/Python-style (high byte: exit code, low byte: signum)
# to shell-style (128 + signum if there was a signal).
def shell_exit_status(status):
  if os.WIFEXITED(status):
    return os.WEXITSTATUS(status)
  elif os.WIFSIGNALED(status):
    return os.WTERMSIG(status)
  else:
    return 127


def get_container_full_name(short_name):
  return "firebuild-perftest-" + short_name.replace(".", "-").replace("+", "-")


def get_commit_timestamp(fbdir):
  return os.popen("git -C " + fbdir + " log --format='format:%cD' -n 1 HEAD").read().strip()


# Creates the container if necessary, starts it up, makes sure it's set up properly.
# "short_name" is the name without the "firebuild-perftest-" prefix. Mustn't contain shell meta-characters.
# "pkgs" are additional packages to install.
# "build_deps" are source packages whose build dependencies are to be installed.
def create_and_start_container(short_name, pkgs, build_deps, firebuild_debs_dir=None):
  name = get_container_full_name(short_name)

  if os.system(container_mgr + " info " + name + " >/dev/null 2>&1") == 0:
    stop_container(short_name)
    delete_container(short_name)

  debug("Launching " + container_mgr + " instance Â«" + name + "Â»")
  os.system(container_mgr + " launch -p firebuild-perftest firebuild-perftest-image-template " + name)

  debug("Waiting for system to start")
  time.sleep(0.5)
  container_exec(name, "systemctl is-system-running --wait")

  debug("Installing required packages")
  container_exec(name, "eatmydata apt-get update -qq")
  if firebuild_debs_dir:
    os.system(container_mgr + " file push -r " + firebuild_debs_dir + " " + name + "/root/")
    container_exec(name, "sh -c 'echo debconf firebuild/license-accepted select true | debconf-set-selections'")
    container_exec(name, "sh -c 'eatmydata apt-get -yqq install /root/*/*.*deb'")
    # make caching more deterministic
    container_exec(name, "sed -i 's|^min_cpu_time|//min_cpu_time|' /etc/firebuild.conf")
  if build_deps:
    container_exec(name, "eatmydata apt-get -yqq build-dep " + " ".join(build_deps))
  if pkgs:
    container_exec(name, "eatmydata apt-get -yqq install " + " ".join(pkgs))

  debug("Copying up the fb-infra repo")
  # container_mgr + " file push --recursive" is too slow, cannot set the uid/gid, and cannot strip a directory component
  os.system("tar c -C .. --transform=s@^[.]/@fb-infra/@ . 2>/dev/null | " + container_mgr + " exec " \
            + container_exec_as_ubuntu_params + " --cwd /home/ubuntu " + name + " -- tar x")

def build_firebuild():
  create_and_start_container("firebuild", ["devscripts"], [])
  name = get_container_full_name("firebuild")

  debug("Copying up the firebuild repo")
  # lxc/incus file push --recursive" is too slow, cannot set the uid/gid, and cannot strip a directory component
  os.system("tar c -C " + fbdir + " --transform=s@^[.]/@firebuild/@ . 2>/dev/null | " + container_mgr + " exec " \
            + container_exec_as_ubuntu_params + " --cwd /home/ubuntu " + name + " -- tar x")

  debug("Building firebuild")
  git_version = os.popen("git -C " + fbdir + " describe --abbrev=8 HEAD").read().strip().lstrip("v")
  container_exec(name, "sed -i \"s/^.*node-d3,/# node-d3,/\" /home/ubuntu/firebuild/debian/control")
  if args.build_firebuild_with_clang:
    container_exec(name, "eatmydata apt-get -yqq install clang lld")
  container_exec(name, "eatmydata apt-get -yqq build-dep /home/ubuntu/firebuild")
  if args.sanitize:
    if container_exec(name, "sh -c \"printf '\n\noverride_dh_auto_configure:\n\tdh_auto_configure -- -DWITH_JEMALLOC=OFF -DSANITIZE=ON\n' >> debian/rules\"",
                      user="ubuntu", extra_exec_params="--cwd /home/ubuntu/firebuild") != 0:
      return None
  if container_exec(name,
                    "sh -x -c 'git clean -dfx && EDITOR=touch  env DEBEMAIL=perftest@example.com dch -b -v{} && sed -i \"s/\\\\(^ -- .*>  \\\\).*/\\\\1{}/\" debian/changelog && env {} dpkg-buildpackage'".format(
                      git_version.replace("-","."), get_commit_timestamp(fbdir), deb_build_env(args.debugging, args.build_firebuild_with_clang)),
                    user="ubuntu", extra_exec_params="--cwd /home/ubuntu/firebuild") != 0:
    return None
  container_exec(name, "sh -c 'mkdir /home/ubuntu/firebuild-debs && mv /home/ubuntu/*.deb /home/ubuntu/*.ddeb /home/ubuntu/firebuild-debs'")
  firebuild_debs_dir = tempfile.mkdtemp()
  os.system(container_mgr + " file pull -r " + name + "/home/ubuntu/firebuild-debs " + firebuild_debs_dir)
  os.system("mv " + firebuild_debs_dir + "/firebuild-debs/*.*deb " + firebuild_debs_dir)
  os.rmdir(os.path.join(firebuild_debs_dir, "firebuild-debs"))
  stop_container("firebuild")
  delete_container("firebuild")
  return firebuild_debs_dir

# Retrieve the report
def read_container_file(container, filename):
  name = get_container_full_name(container)
  return os.popen(container_mgr + " exec " + name + " -- cat {} 2>/dev/null".format(filename)).read()

# Retrieve if firebuild was run
def get_firebuild_started(short_name):
  name = get_container_full_name(short_name)
  return container_exec(name, "test -f /tmp/firebuild_started") == 0


# Stop the container
def stop_container(short_name):
  name = get_container_full_name(short_name)

  debug("Stopping " + container_mgr + " instance Â«" + name + "Â»")
  os.system(container_mgr + " stop " + name)


# Delete the container
def delete_container(short_name):
  name = get_container_full_name(short_name)

  debug("Deleting " + container_mgr + " instance Â«" + name + "Â»")
  os.system(container_mgr + " delete " + name)


# Rename the container
def rename_container(old_short_name, new_short_name):
  old_name = get_container_full_name(old_short_name)
  new_name = get_container_full_name(new_short_name)

  debug("Renaming " + container_mgr + " instance Â«" + old_name + "Â» to Â«" + new_name + "Â»")
  os.system(container_mgr + " rename " + old_name + " " + new_name)


# Read the test definitions
with open(args.tests_conf, "r") as f:
  tests = eval(f.read())

# Which tests to run
if len(args.tests):
  tests_to_run = args.tests
else:
  tests_to_run = tests.keys()


# Run the test(s) one by one
ret = 0

# build firebuild
firebuild_debs_dir = build_firebuild() if not args.only_ccache else None

if not firebuild_debs_dir and not args.only_ccache:
  sys.exit(1)

for test in tests_to_run:
  try:
    (name, test_type, timeout) = test.split(":")
  except ValueError:
    name = test
    test_type = None

  skip_parallel = ["anna",      # Racy, https://github.com/rbalint/fb/issues/897
                   "blt",       # https://bugs.debian.org/1003455
                   "dict-af",   # Most dict-?? packages are compat 5
                   "dict-nr",
                   "dict-ns",
                   "dict-ss",
                   "dict-st",
                   "dict-tn",
                   "dict-ts",
                   "dict-ve",
                   "dict-xh",
                   "dict-zu",
                   "fbset",
                   "gcc-10",    # Racy https://github.com/rbalint/fb/issues/905
                   "ispell-uk",  # Does not support parallel build, compat 7
                   "lua5.2",    # Racy src/Makefile https://github.com/rbalint/fb/issues/840
                   "lua5.3",
                   "main-menu",        # Runs clean and build targets in parallel, like anna
                   "nss",
                   "nvidia-settings",
                   "partconf",        # Runs clean and build targets in parallel, like anna
                   "wireless-regdb",  # does not support parallel build, override_dh_auto_build should use && \ at the end of each line
                   "xfsprogs"   # does not support parallel build, runs ./configure two times in parallel
                   ]
  if args.jobs != "1" and name in skip_parallel:
    debug("Skipping " + name + " because it does not support parallel building")
    continue

  skip_with_tests = ["glib2.0"]  # Tests if pipes are blocking or not being laggy https://github.com/rbalint/fb/issues/842
  if int(args.enable_tests) and name in skip_with_tests:
    debug("Skipping " + name + " because tests would fail")
    continue

  timestamp = time.strftime("%Y%m%d-%H%M%S")
  scriptfile = os.path.expanduser("~/firebuild-perftest-typescript-" + name + "-" + timestamp)
  scriptfile_failed = os.path.expanduser("~/firebuild-perftest-typescript-" + name + "-FAILED-" + timestamp)

  container_name = get_container_full_name(name)
  params = tests[name] if test_type is None else {}
  build_deps = [name]
  deps = []
  if args.with_ccache or args.only_ccache:
    if args.ccache_is_sccache:
      deps += ["cargo", "libssl-dev"]
    else:
      deps += ["ccache"]
  if "deps" in params:
   deps.append(params["deps"])
  if args.timestamp_params:
       deps.append("moreutils")

  create_and_start_container(name, deps, build_deps, firebuild_debs_dir)

  # Install sccache when needed.
  if (args.with_ccache or args.only_ccache) and args.ccache_is_sccache:
    container_exec(container_name, "cargo install sccache", extra_exec_params="--cwd /home/ubuntu/")

  # Limit CPU usage.
  # TODO(rbalint) work with 1,3,4... jobs format
  if len(args.jobs.split(",")) == 1 and args.jobs != str(os.cpu_count()):
    # Pin jobs to cores for consistent performance
    os.system(container_mgr + " config set {} limits.cpu 0-{}".format(container_name, int(args.jobs) - 1))

  # Run the test
  debug("Running test Â«" + name + "Â»")
  status = os.system("script -e -c '" + container_mgr + " exec " + container_exec_as_ubuntu_params + " --cwd /home/ubuntu/fb-infra/perftest " +
                     container_name + " -- ./inner " + ("--debugging " if args.debugging else "") +
                     "-j " + args.jobs + " " + ("--with-diffoscope " if args.with_diffoscope else "") +
                     ("--generate-report " if args.generate_report else "") +
                     ("--with-ccache " if args.with_ccache else "") +
                     ("--only-ccache " if args.only_ccache else "") +
                     ("--ccache-is-sccache " if args.ccache_is_sccache else "") +
                     ("--extra-fb-opts=\"{}\" ".format(args.extra_fb_opts) if args.extra_fb_opts else "") +
                     ("--extra-fb-opts1=\"{}\" ".format(args.extra_fb_opts1) if args.extra_fb_opts1 else "") +
                     ("--extra-fb-opts2=\"{}\" ".format(args.extra_fb_opts2) if args.extra_fb_opts2 else "") +
                     ("--extra-version-string=\"{}\" ".format(args.extra_version_string) if args.extra_version_string else "") +
                     ("--compressed-cache-size " if args.compressed_cache_size else "") +
                     ("--timestamp-params=\"{}\" ".format(args.timestamp_params) if args.timestamp_params else "") +
                     ("--enable-tests " if args.enable_tests else "") +
                     ("--separate-deb-prep " if args.separate_deb_prep else "") +
                     ("--tests-conf {} ".format(args.tests_conf) if args.tests_conf else "") +
                     name + ((":" + test_type + ":" + timeout) if test_type is not None else "") +"' " + scriptfile)
  status = shell_exit_status(status)
  if status:
    ret = status

  if not args.debugging:
    # Get the timing results
    debug("Fetching the results")
    results = read_container_file(name, "/home/ubuntu/buildtimes.csv")
    if results:
      with open(os.path.expanduser("~/buildtimes.csv"), "a") as f:
        f.write(results)

  if args.generate_report:
    debug("Fetching reports")
    for i in [1,2]:
      report = read_container_file(name, "/tmp/report-{}.html".format(i))
      if report:
        with open(os.path.expanduser("~/firebuild-perftest-report-{}{}-{}-{}.html".format(name, ("-FAILED-" if status else ""), timestamp, i)), "w") as f:
          f.write(report)

  firebuild_started = get_firebuild_started(name)
  stop_container(name)
  if status and firebuild_started:
    os.rename(scriptfile, scriptfile_failed)
    rename_container(name, name + "-FAILED-" + timestamp)
    if args.stop_on_first_failure:
      break
  else:
    if not args.keep_log:
      os.remove(scriptfile)
    delete_container(name)

if firebuild_debs_dir:
  shutil.rmtree(firebuild_debs_dir)
sys.exit(ret)
